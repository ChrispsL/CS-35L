Exercise 1.1
------------
1.
F10
Down-arrow (to scroll to Open File...)
e x e r 1 . h t m l
Enter

2.
C-s H T M L Enter

3.
C-s s c a v e n g e r Enter

4.
C-s s e l f - r e f e r e n t i a l Enter

5.
C-s a r r o w Enter

6.
(C-h w m o v e - e Tab Enter)
C-e

7.
(C-h w m o v e - b Tab Enter)
Home

8.
There are many commands to move around the text editor, reading the manual and using C-h w (search commands).

9.
I did not use the arrow keys

10.
C-x C-c

Exercise 1.2
------------
1.
F10
Down-arrow (to scroll to Open File...)
e x e r 2 . h t m l
Enter

2.
M-x g o t o - l i n e Enter 1 8 Enter
C-k

3.
C-s < ! C-g
Home
C-k

4.
C-s < ! C-g
Home
C-k
Down
C-k
Down
C-k

5.
C-s < ! Left Left Delete Delete Delete Delete Delete Delete Delete
C-s < ! Home C-k C-k C-k C-k C-k C-k C-k C-k (8 times)
C-s < ! Home C-k

Exercise 1.3
------------
1.
Opened exer3.html with emacs command

2.
C-s A s s i g n m e n t 1
Left
2
C-s A s s i g n m e n t 1
Left
2

3.
M-<
C-s U T
Left
Insert S - A S
Insert C I I

4.
M-x s e a r c h - f o r w a r d - r Tab Enter [^[:ascii:]]
Home
C-k

5.
M-<
C-s < / o
C-e
Enter

6.
C-x C-s
C-x C-c

Exercise 1.4
------------
1.
Execute given command (cat exer2.html exer2.diff >exer4.html)

2.
Use emacs to access exer4.html

3.
M->
Up
Right
C-@ C-e M-w
C-r h t m l >
C-r C-e Enter
C-y

4.
C-r - >
C-r C-r C-e
C-@ Up Up Up Home Right M-w
C-r i n g . < / p >
C-e Enter C-y
Home Delete Up Delete Up Delete

C-r - >
C-r C-r C-r C-r C-r
Right Right C-@ M-Left M-Right C-y
C-r n o t h i n g .
M-Right Right C-y

C-s - >
C-s C-s C-s C-s C-s
C-e C-@ Up Up Home Right M-w
C-r S u b m i t
C-r C-r Down C-y
Home Delete Up Delete

5.
C-s - - - SP e Home
C-@
M->
Backspace Backspace

6.
C-/ C-/

7.
C-s - - - SP e
Home
< ! - -
[Have to erase the closing -->'s that are messing with our commenting]
C-s - - > C-@ Left Left Left Backspace
C-s - - > C-@ Left Left Left Backspace
C-s - - > C-@ Left Left Left Backspace
C-s - - > C-@ Left Left Left Backspace

8.
M-<
M-% < o l > Enter < o L > Enter y y y y y y y y
7 instances

9.
Execute given command

Exercise 1.5
------------
1.
M-x m k d i r Enter
j u n k Enter

2.
M-x c d Enter
j u n k Enter
C-x C-f h e l l o . c Enter
Right click to paste contents
C-x C-s

3.
M-x c o m p i l e
Backspace Backspace Backspace Backspace Backspace Backspace Backspace Backspace
g c c SP - o SP h e l l o SP h e l l o . c Enter

4.
M-x c o m p i l e Enter
Home C-k
C-x 0 Enter
C-x C-w h e l l o - o u t Enter

5.
C-x i M-Left Insert k e y 1 . t x t Enter
C-x C-w M-left Insert k e y 1 . t x t Enter y

-*- mode: compilation; default-directory: "~/Desktop/CS 35L/junk/" -*-
Compilation started at Sun Apr  8 09:43:51

./hello
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}

Compilation finished at Sun Apr  8 09:43:51

Exercise 1.6
------------
1.
C-x b

2.
( r a n d o m SP " 3 0 4 - 9 9 5 - 7 4 8 " ) C-j
-301730894246615341

3. 
( s e t q SP x SP ( r a n d o m ) ) C-j
( s e t q SP y SP ( r a n d o m ) ) C-j

4.
( * SP x SP y ) C-j
-2251229616045648444
-1695547061432739674
The product (1640209482700520728) is very far from the true product (which is in the order of  magnitudes of 36)

5.
M-: ( * SP x SP y ) Enter
It gives the same answer plus an ordered pair (#o133031435262545676430, #x16c331d595977d18)
The second one is a hex-number, which I converted the first few places to be the SAME as the previous answer (~1.64E18).

6.
No, computer generated random numbers are pseudo-random because they are generated using an algorithm (I learned in MATH 61 that the most often method is the linear congruential method), which is quite deterministic.

7.
most-negative-fixnum: -2305843009213693952 (-2.3E19) (-2^61)
most-positive-fixnum: 2305843009213693952 (2.3E19) (2^61-1)
Total possible choices: 2^62 choose 2 is about 2^62! / (2 * (2^62 - 2)!) = 1/2 * (2^62 * (2^62 - 1)). Approximately, total choices is 2^123
We want |x * y| < 2^61, or -2^61/x < y < 2^61/x.
For any given positive integer x, y must be < 2^61/x. We can approximate that we have about 2^61 (when x = 1) + 2^61 (when y = 1) choices, since when x = 2 or y = 2, we already have a neglible amount of choices (2^31). So our choices that will create a legitimate product is 2^63 (since we also allow negative numbers).
2^63 / 2^123 is the chance of choosing a valid product.
1 - (2^63 / 2^123) is the complement, and is about 1-8.67E-19 (near 100%)
